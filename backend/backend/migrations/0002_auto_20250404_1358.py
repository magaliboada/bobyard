# Generated by Django 5.0.3 on 2025-04-04 13:58

from datetime import datetime
from django.db import connection, migrations
from django.apps.registry import Apps
from django.db.backends.base.schema import BaseDatabaseSchemaEditor


def reset_sequence(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    with connection.cursor() as cursor:
        cursor.execute("SELECT setval(pg_get_serial_sequence('comment', 'id'), 16)")


def add_sample_data(apps: Apps, _: BaseDatabaseSchemaEditor) -> None:
    UserModel = apps.get_model("backend", "UserModel")
    CommentModel = apps.get_model("backend", "CommentModel")
    LikeModel = apps.get_model("backend", "LikeModel")

    users = [
        UserModel(id="c8ad5f1c-ff7d-4a99-9c13-15817288eb5b", name="Joe"),
        UserModel(id="d3b07384-d113-4b43-bc37-9f8b23c2a7b4", name="Jane"),
        UserModel(id="e4d909c2-1af5-42cc-b7e6-3ebd1f7e6d6c", name="Smith"),
        UserModel(id="f7e4a98c-7c2d-4a44-a2d5-5f1d2e5a2d7a", name="Marry"),
        UserModel(id="a9b9f043-2a2d-4c7f-a3e4-6d2f3b1e5d8c", name="Peter"),
        UserModel(id="b1d7c8e9-4f2d-4a1f-8b5d-9e2c3a4f6d7e", name="John"),
        UserModel(id="c4e5d6f7-3a2b-4c1d-9e8f-7b6d2f3a5c1e", name="Lily"),
        UserModel(id="d7e8f9a1-5b2c-4d3e-8f6a-2c4b1d7e9f3a", name="Tom"),
        UserModel(id="e1f2a3b4-6c5d-7e8f-9a2b-3c4d5e6f7a8b", name="Jack"),
        UserModel(id="f3a4b5c6-8d7e-9f1a-2b3c-4d5e6f7a8b9c", name="Rose"),
        UserModel(id="a2b3c4d5-6e7f-8a9b-1c2d-3e4f5a6b7c8d", name="David"),
        UserModel(id="b4c5d6e7-9f8a-1b2c-3d4e-5f6a7b8c9d1e", name="Linda"),
        UserModel(id="c6d7e8f9-2a1b-3c4d-5e6f-7a8b9c1d2e3f", name="Mike"),
        UserModel(id="d8f9a1b2-4c3d-5e6f-7a8b-9c1d2e3f4a5b", name="Emily"),
        UserModel(id="e2f3a4b5-6c7d-8e9f-1a2b-3c4d5e6f7a8b", name="Bob"),
        UserModel(id="f4a5b6c7-9d8e-1f2a-3b4c-5d6e7f8a9b1c", name="Sara"),
    ]

    for user in users:
        user.save()

    comments = [
        CommentModel(
            id=1,
            user=users[0],
            text="As a solo dev who's taken up freelancing, Firebase and Supabase both work very well for the kinds of projects I do for clients. There's really nothing they can't do since they don't stop you from combining them with other solutions, and there's no reason to take on the extra headache of doing everything from scratch if you're working solo. Firebase is just GCP with an abstraction layer on top - there's nothing stopping you from spinning up a Node service using Cloud Run for long-running tasks that can't be deployed as cloud functions, for example. Same goes for Supabase, nothing stopping you from using AWS or other cloud services to supplement what you get for free with it.",
            image_url="https://yt3.googleusercontent.com/GsP5Yvc5jOSop4SJf_75wdOYaEbO-7ZyYhnARodAGRnEMh-OQjGPGzUz2ZtzsHPtqFyHGvmbEtI=s900-c-k-c0x00ffffff-no-rj",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=2,
            user=users[1],
            text="I'm pretty used to node+express and doing all the backend work by myself. Baas solutions are cool, unless you need mountains of custom logic. Then they will only slow you down. Coding your own backend and deploying it securely takes experience, but you'll never have that experience if you never try (;",
            image_url="https://miro.medium.com/v2/resize:fit:2000/1*HkM78Z1G5UKqQNCHwBHRfA.png",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=3, user=users[2], text="C#", image_url="", created_at=datetime.now()
        ),
        CommentModel(
            id=4,
            user=users[3],
            text="Node/express or Rust/Axum.",
            image_url="",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=5,
            user=users[4],
            text=". NET Core Web API / SQL Server. I was born by .NET and I'll die by it. Tools like NSwag and umijs-openapi plugin read the automatically generated Swagger UI from the API and generate typescript types and API fetch functions. Off the beaten path but works for me. All that being said supabase is pretty dope",
            image_url="https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-pages-using-swagger/_static/custom-info-nswag.png?view=aspnetcore-7.0",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=6,
            user=users[5],
            text="If it’s going to be complicated, NestJs. If not, just Next/Remix with Supabase.",
            image_url="",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=7,
            user=users[6],
            text="Ruby on Railsss",
            image_url="",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=8,
            user=users[7],
            text="I'm a big fan of Hasura. It's a GraphQL engine that sits on top of Postgres. It's open source and you can run it yourself, but they also have a hosted version. It's really easy to get started with and you can do a lot with it. I've used it for a few projects and it's been great.",
            image_url="https://avatars.githubusercontent.com/u/13966722?s=200&v=4",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=9,
            user=users[8],
            text="Laravel is my go to. Extremely stable and robust release cycles, has been around for over 10 years now and it’s all refinement at this stage. It has almost everything baked in (auth, jobs, queues, commands, sessions, etc) and lots of first party modules (like payments).",
            image_url="https://laravel.com/img/logomark.min.svg",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=10,
            user=users[9],
            text="I love Ruby on Rails, and since discovering Inertia.js I can't imagine using anything else for the backend. ActiveRecord is so powerful, and Ruby is so expressive and fun to write in. I used to start projects with RoR and try to incorporate React with APIs or GraphQL, but would get tired of the context change. With Inertia, React is just the view layer in the monolith, it doesn't feel separate at all. I love working in this stack and will probably start all future projects heavier than a brochure page with it. If anybody uses React or Laravel, do yourself a favor and check out Inertia, it brings the whole stack together.",
            image_url="https://avatars.githubusercontent.com/u/5429470?s=200&v=4",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=11,
            user=users[10],
            text="Golang. I use that for work on the daily so it’s what’s easiest for me.",
            image_url="https://www.freecodecamp.org/news/content/images/2021/10/golang.png",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=12,
            user=users[11],
            text="Since you are going solo, saving time on setup/infra/devops make sense (and focus time on dev). For custom logic, Supabase actually let you write edge custom functions using Deno. It should cover a vast amount of requirements for having a custom backend.",
            image_url="",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=13,
            user=users[12],
            text="I used to use nextjs with supabase, but recently switched to nextjs with planetscale and clerky. both hosted on vercel. nothing against supabase btw, both stacks are great, just trying the https://create.t3.gg/ stack to learn some new things.",
            image_url="",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=14,
            user=users[13],
            text="Depends. I like to use a Python framework for ML-based projects (Django or FastAPI). For the easiest stack, I generally use Next/Supabase",
            image_url="",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=15,
            user=users[14],
            text="I've been using NestJs for the backend of a sass I've been building. I don't think I'll use it again on my next project. I've been itching to learn something else outside the JS ecosystem like Rails or Phoenix. Supabase looks cool too though for a solo dev.",
            image_url="",
            created_at=datetime.now(),
        ),
        CommentModel(
            id=16,
            user=users[15],
            text="Sometimes .Net, sometimes Express, sometimes Next. Next can be good esp for smaller teams or solo devs since you can do backend/frontend all on server side, but it is fairly opinionated and has its own quirks.",
            image_url="https://cdn.sanity.io/images/3do82whm/next/4b1f008289a88f4438a1c983fb32cf1a636d9d0e-1000x667.png?w=720&h=480&fit=clip&auto=format",
            created_at=datetime.now(),
        ),
    ]

    for comment in comments:
        comment.save()

    likes = [
        LikeModel(user=users[0], comment=comments[0]),
        LikeModel(user=users[1], comment=comments[1]),
        LikeModel(user=users[2], comment=comments[2]),
        LikeModel(user=users[3], comment=comments[3]),
        LikeModel(user=users[4], comment=comments[4]),
        LikeModel(user=users[5], comment=comments[5]),
        LikeModel(user=users[6], comment=comments[6]),
        LikeModel(user=users[6], comment=comments[7]),
        LikeModel(user=users[6], comment=comments[8]),
        LikeModel(user=users[6], comment=comments[9]),
        LikeModel(user=users[6], comment=comments[10]),
    ]

    for like in likes:
        like.save()


def remove_sample_data(apps: Apps, _: BaseDatabaseSchemaEditor) -> None:
    UserModel = apps.get_model("backend", "UserModel")
    CommentModel = apps.get_model("backend", "CommentModel")
    LikeModel = apps.get_model("backend", "LikeModel")

    # Delete all data in reverse order
    LikeModel.objects.all().delete()
    CommentModel.objects.all().delete()
    UserModel.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("backend", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(add_sample_data, remove_sample_data),
        migrations.RunPython(reset_sequence),
    ]
